
WookieChat Developer Information
---------------------------------

Since the original WookieChat code is completly twisted and uses tons of
globals, I decided at some point, that it is not possible to convert all windows
to window sub classes one by one.

Breaking the code apart is no option, too, so I choosed a more radical way. I
recreated all windows as separate sub classes as planned, but I did not replace
them all. Instead I created a separate application, which is used and running in
the old environment. To avoid crashes due no created objects, all old windows
and even the original application gets created as before.

We already reached a step, where the old wookie code is no longer used. Disable
the first line (NEWWOOKIE) in makefile by using a # and compile again to get the
old code again. This will not work forever.


What are the upcoming steps to go for?
---------------------------------------

Since all mayor classes are already there, it is time to implement network and
output support. The basic framework is already there. muiclass_network.c contains
all initial required network stuff. DCC asnd CTCP will be added after general chat
is working.

There is already a big difference between the original (V1,V2) WookieChat. Since
all parts are mui classes we already support multi chat window by default. The
plan is to add a context menu to channel list to move the to a separate window.
Also dragging between windows and dropping outside any window to create a new
chat window, are planned.

Note for developers
--------------------

RULE #1: If you feel the need of adding any global vars, then you are doing
something wrong. Please contact the main developers before messing anything up.

RULE #2: If you port WookieChat to a different system, then use system_whatever
and adapt what is done for other systems if needed.

RULE #3: WookieChat is currently only using NList. If you feel the need, then do
it like MorphOS is doing when replacing NLIST.

RULE #4: Using ReturnIDs is evil. Face it. There is no way we tollerate this.

RULE #5: Using Hooks in Lists is evil. If you implement a list, then subclass it
like real man do.

RULE #6: Keep the basic mui class layout. This will keep the code readable. If
you understand how one class is implemented, then you know how it works for all
classes.

Additional notes to specific developers: (just remove after reading :D )

NOTE to deadwood: Maybe it is a good idea to open a separate trunk and store the
version right after fixing locales and before starting adding subclasses and
kill all unused files from offical trunk.

